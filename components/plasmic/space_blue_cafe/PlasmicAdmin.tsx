// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n5xwmNeXPRzvTsuicaWWu3
// Component: g6YiMkyrbbYT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../return_policy/plasmic.module.css"; // plasmic-import: n5xwmNeXPRzvTsuicaWWu3/projectcss
import sty from "./PlasmicAdmin.module.css"; // plasmic-import: g6YiMkyrbbYT/css

import CheckSvgIcon from "../return_policy/icons/PlasmicIcon__CheckSvg"; // plasmic-import: ReynV80Quqvt/icon

createPlasmicElementProxy;

export type PlasmicAdmin__VariantMembers = {};
export type PlasmicAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdmin__VariantsArgs;
export const PlasmicAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicAdmin__ArgsType;
export const PlasmicAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicAdmin__OverridesType = {
  root?: Flex__<"div">;
  richAppLayout?: Flex__<typeof RichLayout>;
  section?: Flex__<"section">;
  dataProvider?: Flex__<typeof DataProvider>;
  dataFetcher?: Flex__<typeof Fetcher>;
  svg?: Flex__<"svg">;
};

export interface DefaultAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAdmin__RenderFunc(props: {
  variants: PlasmicAdmin__VariantsArgs;
  args: PlasmicAdmin__ArgsType;
  overrides: PlasmicAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "idterpilih",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    cariMenuBerdasarkanId: usePlasmicDataOp(() => {
      return {
        sourceId: "dtpchsC6bsBay6W2VJnB3T",
        opId: "8dd5ec03-5183-4b28-a9d2-1b9d598d0a03",
        userArgs: {
          params: [
            (() => {
              where: {
                _id: $state.idterpilih;
              }
            })()
          ]
        },
        cacheKey: `plasmic.$.8dd5ec03-5183-4b28-a9d2-1b9d598d0a03.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <RichLayout
            data-plasmic-name={"richAppLayout"}
            data-plasmic-override={overrides.richAppLayout}
            className={classNames("__wab_instance", sty.richAppLayout)}
            fixSiderbar={true}
            fixedHeader={true}
            layout={"side"}
            logoElement={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__e42Wq)}
                displayHeight={"35px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"35px"}
                src={{
                  src: "/plasmic/return_policy/images/spaceblueTransparantPng.png",
                  fullWidth: 455,
                  fullHeight: 455,
                  aspectRatio: undefined
                }}
              />
            }
            navMenuItems={(() => {
              const __composite = [{ path: null, name: "Home" }];
              __composite["0"]["path"] = `/`;
              return __composite;
            })()}
            simpleNavTheme={(() => {
              const __composite = { scheme: null };
              __composite["scheme"] = "primary";
              return __composite;
            })()}
            title={"Admin Space Blue Website"}
          >
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <div className={classNames(projectcss.all, sty.columns__b9Thn)}>
                <div className={classNames(projectcss.all, sty.column__sUiTm)}>
                  <DataProvider
                    data-plasmic-name={"dataProvider"}
                    data-plasmic-override={overrides.dataProvider}
                    className={classNames("__wab_instance", sty.dataProvider)}
                    data={[
                      {
                        name: "Fill Murray",
                        birthYear: 1950,
                        profilePicture: ["https://www.fillmurray.com/200/300"]
                      },
                      {
                        name: "Place Cage",
                        birthYear: 1950,
                        profilePicture: ["https://www.placecage.com/200/300"]
                      }
                    ]}
                    name={"celebrities"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__cGrtI)}
                >
                  <Fetcher
                    data-plasmic-name={"dataFetcher"}
                    data-plasmic-override={overrides.dataFetcher}
                    className={classNames("__wab_instance", sty.dataFetcher)}
                    dataOp={{
                      sourceId: "dtpchsC6bsBay6W2VJnB3T",
                      opId: "b5bcd99a-998c-4ed8-933f-8a1be98a7577",
                      userArgs: {},
                      cacheKey: `plasmic.$.ps6jWjt-leBO.$.b5bcd99a-998c-4ed8-933f-8a1be98a7577.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    }}
                    name={"semuaMenuQuery"}
                    queries={$queries}
                  >
                    {($queries: any) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___0P7NQ
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.semuaMenuQuery.data.response.rows;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__vLidc
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateIdterpilih"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["idterpilih"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIdterpilih"] != null &&
                                  typeof $steps["updateIdterpilih"] ===
                                    "object" &&
                                  typeof $steps["updateIdterpilih"].then ===
                                    "function"
                                ) {
                                  $steps["updateIdterpilih"] = await $steps[
                                    "updateIdterpilih"
                                  ];
                                }
                              }}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__xyyp2)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"auto"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return currentItem.data.foto.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns___7Kveu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___9WX8
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem.data.tersedia;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <CheckSvgIcon
                                      data-plasmic-name={"svg"}
                                      data-plasmic-override={overrides.svg}
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__ogDaQ
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___5SUjI
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.data.nama;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "nama menu";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__hVlJn
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__iw27V
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gsrcI
                                    )}
                                  >
                                    {"Rp."}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column___4HgWb
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cBq0L
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.data.harga;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "harga";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__b5696
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__fNRg
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___8Vt81
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__kcsVs
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__siHZf
                          )}
                        />
                      </div>
                    )}
                  </Fetcher>
                </Stack__>
              </div>
            </section>
          </RichLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "richAppLayout",
    "section",
    "dataProvider",
    "dataFetcher",
    "svg"
  ],
  richAppLayout: [
    "richAppLayout",
    "section",
    "dataProvider",
    "dataFetcher",
    "svg"
  ],
  section: ["section", "dataProvider", "dataFetcher", "svg"],
  dataProvider: ["dataProvider"],
  dataFetcher: ["dataFetcher", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  richAppLayout: typeof RichLayout;
  section: "section";
  dataProvider: typeof DataProvider;
  dataFetcher: typeof Fetcher;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdmin__VariantsArgs;
    args?: PlasmicAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAdmin__ArgProps,
          internalVariantPropNames: PlasmicAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdmin";
  } else {
    func.displayName = `PlasmicAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicAdmin = Object.assign(
  // Top-level PlasmicAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    richAppLayout: makeNodeComponent("richAppLayout"),
    section: makeNodeComponent("section"),
    dataProvider: makeNodeComponent("dataProvider"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAdmin
    internalVariantProps: PlasmicAdmin__VariantProps,
    internalArgProps: PlasmicAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAdmin;
/* prettier-ignore-end */
