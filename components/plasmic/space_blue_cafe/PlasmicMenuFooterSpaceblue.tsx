// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n5xwmNeXPRzvTsuicaWWu3
// Component: Tfk_MHYXQ-8l

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_8LhMaSoWc2XY } from "../return_policy/PlasmicGlobalVariant__Screen"; // plasmic-import: 8LhMaSOWc2xY/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../return_policy/plasmic.module.css"; // plasmic-import: n5xwmNeXPRzvTsuicaWWu3/projectcss
import sty from "./PlasmicMenuFooterSpaceblue.module.css"; // plasmic-import: Tfk_MHYXQ-8l/css

import IconIcon from "../return_policy/icons/PlasmicIcon__Icon"; // plasmic-import: gsgjP69is81N/icon

createPlasmicElementProxy;

export type PlasmicMenuFooterSpaceblue__VariantMembers = {};
export type PlasmicMenuFooterSpaceblue__VariantsArgs = {};
type VariantPropType = keyof PlasmicMenuFooterSpaceblue__VariantsArgs;
export const PlasmicMenuFooterSpaceblue__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMenuFooterSpaceblue__ArgsType = {};
type ArgPropType = keyof PlasmicMenuFooterSpaceblue__ArgsType;
export const PlasmicMenuFooterSpaceblue__ArgProps = new Array<ArgPropType>();

export type PlasmicMenuFooterSpaceblue__OverridesType = {
  root?: Flex__<"div">;
  h3?: Flex__<"h3">;
};

export interface DefaultMenuFooterSpaceblueProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuFooterSpaceblue__RenderFunc(props: {
  variants: PlasmicMenuFooterSpaceblue__VariantsArgs;
  args: PlasmicMenuFooterSpaceblue__ArgsType;
  overrides: PlasmicMenuFooterSpaceblue__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8LhMaSoWc2XY()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h3
        data-plasmic-name={"h3"}
        data-plasmic-override={overrides.h3}
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3
        )}
      >
        {"Space Blue Cafe"}
      </h3>
      <Stack__
        as={PlasmicLink__}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link__m2Ri8)}
        component={Link}
        platform={"nextjs"}
      >
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__bjRey)}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__l7Mcq
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Our Place"
            : "Menu"}
        </div>
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__pj2Pm)}
            role={"img"}
          />
        ) : null}
      </Stack__>
      <Stack__
        as={PlasmicLink__}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link__sA8EH)}
        component={Link}
        platform={"nextjs"}
      >
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg___3VdsJ)}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zXaxF
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Contact"
            : "Location"}
        </div>
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__rnAT)}
            role={"img"}
          />
        ) : null}
      </Stack__>
      <Stack__
        as={PlasmicLink__}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link__hjOSl)}
        component={Link}
        platform={"nextjs"}
      >
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__hsDNg)}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aJ1Hy
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Our Place"
            : "Our Mission"}
        </div>
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__naQHp)}
            role={"img"}
          />
        ) : null}
      </Stack__>
      <Stack__
        as={PlasmicLink__}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link__umc6U)}
        component={Link}
        platform={"nextjs"}
      >
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__tJbYb)}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pfVta
          )}
        >
          {hasVariant(globalVariants, "screen", "mobileOnly")
            ? "Our menu"
            : "Sustainability"}
        </div>
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__o8Ykg)}
            role={"img"}
          />
        ) : null}
      </Stack__>
      <Stack__
        as={PlasmicLink__}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.a, sty.link__xjz0Y)}
        component={Link}
        platform={"nextjs"}
      >
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg__x69Dh)}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sJfcM
          )}
        >
          {"Careers"}
        </div>
        {false ? (
          <IconIcon
            className={classNames(projectcss.all, sty.svg___8TOkR)}
            role={"img"}
          />
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuFooterSpaceblue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuFooterSpaceblue__VariantsArgs;
    args?: PlasmicMenuFooterSpaceblue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuFooterSpaceblue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMenuFooterSpaceblue__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuFooterSpaceblue__ArgProps,
          internalVariantPropNames: PlasmicMenuFooterSpaceblue__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuFooterSpaceblue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuFooterSpaceblue";
  } else {
    func.displayName = `PlasmicMenuFooterSpaceblue.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuFooterSpaceblue = Object.assign(
  // Top-level PlasmicMenuFooterSpaceblue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicMenuFooterSpaceblue
    internalVariantProps: PlasmicMenuFooterSpaceblue__VariantProps,
    internalArgProps: PlasmicMenuFooterSpaceblue__ArgProps
  }
);

export default PlasmicMenuFooterSpaceblue;
/* prettier-ignore-end */
